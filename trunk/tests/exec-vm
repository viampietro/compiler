;; prend une vm et la valeur du compteur ordinal
;; puis lance l'execution du code de la vm a partir de co.
(defun exec-vm (vm co)
  (let ((not-finished t)
	(instr nil)
	(nbargs nil)
	(args-list nil)
	(i nil)
	(return-value nil))
    (loop while not-finished do
	  (progn
	    (setf instr (read-code vm co))
	    ;; (format t "INSTR nÂ° ~s : ~s~%" co instr)
	    (case (car instr)
		  ;; empile la valeur et incremente le data stack pointer
		  (:CONST (progn
			    ;; on incremente le pointeur de sommet de pile
			    ;; avant d'ajouter une valeur 
			    (write-data-stack vm (get vm :DSP) (cdr instr))
			    (set-register vm :DSP (1+ (get vm :DSP)))
			    (incf co)))

		  ;; empile la valeur de la variable lue a l'adresse frame pointer + (numvar - 1)
		  (:VAR (progn
			  (write-data-stack vm (get vm :DSP) (read-data-stack vm (+ (get vm :FP) (- (cdr instr) 1))))
			  (set-register vm :DSP (1+ (get vm :DSP)))
			  (incf co)))
		  
		  ;; charge la valeur du sommet de pile dans la variable d'adresse frame pointer + (numvar - 1)
		  ;; et depile
		  (:SET-VAR (progn
			      (write-data-stack vm (+ (get vm :FP) (- (cdr instr) 1)) (read-data-stack vm (set-register vm :DSP (1- (get vm :DSP)))))
			      (incf co)))

		  (:SKIP (setf co (+ (cdr instr) co 1)))

		  ;; si le sommet de la pile est egal a nil on saute le nb d'instructions indique par le cdr
		  ;; sinon on incremente le co de 1.
		  ;; On depile quelque soit la valeur du sommet de pile
		  (:SKIPNIL (if (null (read-data-stack vm (set-register vm :DSP (1- (get vm :DSP)))))
				(setf co (+ (cdr instr) co 1))
			      (incf co)))
		  
		  ;; on depile le nb d'arguments dans le setf
		  (:CALL (progn
			   (setf nbargs (read-data-stack vm (set-register vm :DSP (1- (get vm :DSP)))))
			   (setf args-list nil)
			   
			   ;; si ce qui suit :CALL n'est pas une adresse
			   (if (not (integerp (cadr instr)))
			       ;; si le label n'est pas connu par lisp
			       (if (not (fboundp (cadr instr)))
				   (error "~s is undefined in clisp or vm" (cadr instr))
				 (progn
				   (setf i 0)
				   (loop while (<= i (1- nbargs))
					 do (progn
					      (set-register vm :DSP (1- (get vm :DSP)))
					      (setf args-list `(,(read-data-stack vm (get vm :DSP)) ,@args-list))
					      (setf i (1+ i))))
				   ;; (format t "args-list = ~s~%" args-list)
				   (write-data-stack vm (get vm :DSP) (apply (cadr instr) args-list))
				   (set-register vm :DSP (1+ (get vm :DSP)))
				   (incf co)))
			     ;; sinon :CALL est suivi par une adresse (fonction chargee dans la vm)
			     (progn
			       ;; empiler l'adresse de retour dans la control stack puis empiler la valeur de :FP
			       (write-control-stack vm (get vm :CSP) (+ co 1))
			       (set-register vm :CSP (1+ (get vm :CSP))) ;; CSP = CSP + 1
			       (write-control-stack vm (get vm :CSP) (get vm :FP))
			       (set-register vm :CSP (1+ (get vm :CSP))) ;; CSP = CSP + 1
			       
			       ;; calculer la valeur du nveau :FP
			       (set-register vm :FP (- (get vm :DSP) nbargs))

			       ;; saut a l'adresse de la fonction pointee par CALL
			       (setf co (cadr instr))))))

		  ;; on reserve l'espace memoire pour les vars locales en augmentant
		  ;; le pointeur de pile de la valeur qui suit :STACK
		  (:STACK (progn
			    (set-register vm :DSP (+ (get vm :DSP) (cdr instr)))
			    (incf co)))
		  
		  (:RTN (progn
			  
			  ;; on stocke la valeur de retour dns la var return-value
			  (setf return-value (read-data-stack vm (set-register vm :DSP (1- (get vm :DSP))))) 
			  
			  ;; on place la valeur de du frame pointer dans data-stack pointer
			  ;; (operation de dechargement du contexte d'appel d'une fonction lors du retour) 
			  (set-register vm :DSP (get vm :FP))
			  (write-data-stack vm (get vm :DSP) return-value)
			  (set-register vm :DSP (1+ (get vm :DSP)))
			  
			  ;; on remet dans le frame pointer son ancienne valeur qui etait stockee
			  ;; en haut de la pile de controle (retour au contexte de la fonction appelante)
			  (set-register vm :FP (read-control-stack vm (set-register vm :CSP (1- (get vm :CSP)))))
			  (set-register vm :CSP (1- (get vm :CSP))) ;; decremente le control stack pointer
			  
			  ;; saute a l'adresse de retour stockee au sommet de la control stack
			  (setf co (read-control-stack vm (get vm :CSP)))))
		  
		  (:HALT (setf not-finished nil))
		  (t (error "instr must be one of :HALT, :RTN, :STACK, :CALL, :SKIPNIL, :SKIP, :SET-VAR, :VAR, :CONST")))
	    
	    ;; INSTRUCTIONS DE DEBUG
	    ;; (format t "DATA STACK : ")
	    ;; (display-data-stack vm)
	    ;; (format t "CONTROL STACK : ")
	    ;; (display-control-stack vm)
	    ;; (format t "DSP = ~s~%" (get vm :DSP))
	    ;; (format t "CSP = ~s~%" (get vm :CSP))
	    ;; (format t "FP = ~s~%" (get vm :FP))
	    ;; (format t "Enter to continue, Q to quit : ")
	    ;; (if (equal "Q" (read-line))
	    ;; 	(return nil)
	    ;;   (format t "-------------------------------~%"))
	    ))))
