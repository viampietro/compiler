(defun eval-li (expr env)
  (let ((fun nil)
	(nexpr nil))
  (if (atom expr)
      (error "~s n'est pas une expression LI" expr)
    (case (car expr)
	  (:LIT (cdr expr))
	  (:VAR (aref env (cdr expr)))
	  (:SET-VAR (setf (aref env (cadr expr)) (eval-li (caddr expr) env)))
	  (:IF (if (eval-li (second expr) env)
		   (eval-li (third expr) env)
		 (eval-li (fourth expr) env)))
	  (:CALL (apply (symbol-function (second expr)) (map-eval-li (cddr expr) env)))
	  (:MCALL (progn
		    (setf fun (get-defun (second expr)))
		    (eval-li (fourth fun)
			     (make-eval-li-env (map-eval-li (cddr expr) env)
					       (third fun)
					       (- (third fun) (second fun) 1)))))
	  (:PROGN (map-eval-li-progn (cdr expr) env))
	  (:UNKNOWN (progn
		      (setf nexpr (lisp2li (second expr) (third expr)))
		      (if (eq (car nexpr) :UNKNOWN)
			  (error "UNKNOWN ~s" (cdr expr))
			(eval-li (displace expr nexpr) env))))
	  (t (error "expression must be one of :LIT, :VAR, :SET-VAR, :IF, :CALL, :MCALL, :PROGN, :UNKNOWN"))))))